# spend_api_min.py
import uvicorn
import pandas as pd
from fastapi import FastAPI
from pydantic import BaseModel, Field
from fastapi.responses import JSONResponse
from typing import Optional, List, Dict

app = FastAPI(title="Transaction API")

# ----------------------- 데이터셋 -----------------------
data = [
    # ----- 조용걸 -----
    {"이름": "조용걸", "일자": "2025-08-09", "지출내역": "회사 앞 토스트", "카테고리(대분류)": "식비", "카테고리(중분류)": "아침", "금액": 5500},
    {"이름": "조용걸", "일자": "2025-08-09", "지출내역": "사내식당",     "카테고리(대분류)": "식비", "카테고리(중분류)": "점심", "금액": 8500},
    {"이름": "조용걸", "일자": "2025-08-09", "지출내역": "백반집",       "카테고리(대분류)": "식비", "카테고리(중분류)": "저녁", "금액": 13000},
    {"이름": "조용걸", "일자": "2025-08-09", "지출내역": "영화 관람",     "카테고리(대분류)": "여가", "카테고리(중분류)": "영화", "금액": 13000},
    {"이름": "조용걸", "일자": "2025-08-10", "지출내역": "브런치 카페",  "카테고리(대분류)": "식비", "카테고리(중분류)": "아침", "금액": 9000},
    {"이름": "조용걸", "일자": "2025-08-10", "지출내역": "라멘",         "카테고리(대분류)": "식비", "카테고리(중분류)": "점심", "금액": 12000},
    {"이름": "조용걸", "일자": "2025-08-10", "지출내역": "친구와 저녁",  "카테고리(대분류)": "식비", "카테고리(중분류)": "저녁", "금액": 21000},
    {"이름": "조용걸", "일자": "2025-08-10", "지출내역": "무신사 티셔츠", "카테고리(대분류)": "쇼핑", "카테고리(중분류)": "의류", "금액": 29000},
    {"이름": "조용걸", "일자": "2025-08-11", "지출내역": "아메리카노",   "카테고리(대분류)": "간식", "카테고리(중분류)": "커피", "금액": 4500},
    {"이름": "조용걸", "일자": "2025-08-11", "지출내역": "사내식당",     "카테고리(대분류)": "식비", "카테고리(중분류)": "점심", "금액": 8500},
    {"이름": "조용걸", "일자": "2025-08-11", "지출내역": "백반집",       "카테고리(대분류)": "식비", "카테고리(중분류)": "저녁", "금액": 12000},
    {"이름": "조용걸", "일자": "2025-08-11", "지출내역": "지하철/버스",  "카테고리(대분류)": "교통", "카테고리(중분류)": "대중교통", "금액": 1450},
    {"이름": "조용걸", "일자": "2025-08-12", "지출내역": "회사 앞 토스트", "카테고리(대분류)": "식비", "카테고리(중분류)": "아침", "금액": 5500},
    {"이름": "조용걸", "일자": "2025-08-12", "지출내역": "사내식당",      "카테고리(대분류)": "식비", "카테고리(중분류)": "점심", "금액": 8500},
    {"이름": "조용걸", "일자": "2025-08-12", "지출내역": "노래방",        "카테고리(대분류)": "여가", "카테고리(중분류)": "노래", "금액": 18000},
    {"이름": "조용걸", "일자": "2025-08-13", "지출내역": "헬스장 일일권", "카테고리(대분류)": "운동", "카테고리(중분류)": "헬스", "금액": 6000},
    {"이름": "조용걸", "일자": "2025-08-13", "지출내역": "사내식당",      "카테고리(대분류)": "식비", "카테고리(중분류)": "점심", "금액": 8500},
    {"이름": "조용걸", "일자": "2025-08-13", "지출내역": "전자책 리더 케이스", "카테고리(대분류)": "쇼핑", "카테고리(중분류)": "생활", "금액": 15900},
    {"이름": "조용걸", "일자": "2025-08-14", "지출내역": "통신요금",      "카테고리(대분류)": "구독", "카테고리(중분류)": "통신", "금액": 39000},
    {"이름": "조용걸", "일자": "2025-08-14", "지출내역": "저녁 샐러드",   "카테고리(대분류)": "식비", "카테고리(중분류)": "저녁", "금액": 11000},
    {"이름": "조용걸", "일자": "2025-08-15", "지출내역": "볼링장",        "카테고리(대분류)": "여가", "카테고리(중분류)": "볼링", "금액": 16000},
    {"이름": "조용걸", "일자": "2025-08-15", "지출내역": "셔츠 구매",     "카테고리(대분류)": "쇼핑", "카테고리(중분류)": "의류", "금액": 49000},

    # ----- 김민수 -----
    {"이름": "김민수", "일자": "2025-08-09", "지출내역": "아메리카노",   "카테고리(대분류)": "간식", "카테고리(중분류)": "커피", "금액": 4500},
    {"이름": "김민수", "일자": "2025-08-09", "지출내역": "도서 1권",     "카테고리(대분류)": "쇼핑", "카테고리(중분류)": "도서", "금액": 15800},
    {"이름": "김민수", "일자": "2025-08-10", "지출내역": "지하철/버스",  "카테고리(대분류)": "교통", "카테고리(중분류)": "대중교통", "금액": 1450},
    {"이름": "김민수", "일자": "2025-08-10", "지출내역": "콘솔 게임 DLC","카테고리(대분류)": "여가", "카테고리(중분류)": "게임", "금액": 12900},
    {"이름": "김민수", "일자": "2025-08-12", "지출내역": "점심 도시락",  "카테고리(대분류)": "식비", "카테고리(중분류)": "점심", "금액": 7800},
    {"이름": "김민수", "일자": "2025-08-13", "지출내역": "셔츠",         "카테고리(대분류)": "쇼핑", "카테고리(중분류)": "의류", "금액": 35000},
    {"이름": "김민수", "일자": "2025-08-15", "지출내역": "넷플릭스",     "카테고리(대분류)": "구독", "카테고리(중분류)": "통신", "금액": 13500},

    # ----- 박지훈 -----
    {"이름": "박지훈", "일자": "2025-08-09", "지출내역": "사내식당",     "카테고리(대분류)": "식비", "카테고리(중분류)": "점심", "금액": 8500},
    {"이름": "박지훈", "일자": "2025-08-10", "지출내역": "카페 디저트",  "카테고리(대분류)": "간식", "카테고리(중분류)": "디저트", "금액": 6200},
    {"이름": "박지훈", "일자": "2025-08-11", "지출내역": "런닝화",       "카테고리(대분류)": "쇼핑", "카테고리(중분류)": "의류", "금액": 69000},
    {"이름": "박지훈", "일자": "2025-08-12", "지출내역": "중고서적 2권", "카테고리(대분류)": "쇼핑", "카테고리(중분류)": "도서", "금액": 12000},
    {"이름": "박지훈", "일자": "2025-08-13", "지출내역": "탁구장",       "카테고리(대분류)": "여가", "카테고리(중분류)": "스포츠", "금액": 8000},
    {"이름": "박지훈", "일자": "2025-08-14", "지출내역": "택시",         "카테고리(대분류)": "교통", "카테고리(중분류)": "택시", "금액": 7200},
    {"이름": "박지훈", "일자": "2025-08-15", "지출내역": "가죽 벨트",    "카테고리(대분류)": "쇼핑", "카테고리(중분류)": "패션소품", "금액": 27000},
]
df = pd.DataFrame(data)
df["일자"] = pd.to_datetime(df["일자"], format="%Y-%m-%d", errors="coerce")

# ----------------------- 스키마 -----------------------
class TxnRequest(BaseModel):
    name: str = Field(..., description="고객 이름 (정확 매칭)")

class CategoryOnlyRequest(BaseModel):
    name: str = Field(..., description="고객 이름 (정확 매칭)")
    category_major: str = Field(..., description="카테고리(대분류) (예: 식비/여가/쇼핑/교통/구독/간식/운동 등)")

# ----------------------- 공통 변환 -----------------------
from typing import Any
def to_records(sub: pd.DataFrame) -> List[Dict[str, Any]]:
    sub_sorted = sub.sort_values(["일자", "카테고리(대분류)", "카테고리(중분류)"])
    return [
        {
            "이름": r["이름"],
            "일자": r["일자"].strftime("%Y-%m-%d") if pd.notna(r["일자"]) else None,
            "지출내역": r["지출내역"],
            "카테고리(대분류)": r["카테고리(대분류)"],
            "카테고리(중분류)": r["카테고리(중분류)"],
            "금액": int(r["금액"]),
        }
        for _, r in sub_sorted.iterrows()
    ]

# ----------------------- 엔드포인트 -----------------------
# (1) 이름만 받아 전체 거래 반환
@app.post("/tool/transactions")
def get_transactions(req: TxnRequest):
    """
    입력 예:
    {
      "name": "조용걸"
    }

    출력 예(전체 거래 내역 반환):
    {
      "name": "조용걸",
      "records": [
        {
          "이름": "조용걸",
          "일자": "2025-08-09",
          "지출내역": "회사 앞 토스트",
          "카테고리(대분류)": "식비",
          "카테고리(중분류)": "아침",
          "금액": 5500
        },
        {
          "이름": "조용걸",
          "일자": "2025-08-09",
          "지출내역": "사내식당",
          "카테고리(대분류)": "식비",
          "카테고리(중분류)": "점심",
          "금액": 8500
        },
        ...
      ],
      "message": null
    }
    """
    mask = (df["이름"] == req.name.strip())
    sub = df.loc[mask].copy()
    records = to_records(sub)

    return JSONResponse(
        content={
            "name": req.name,
            "records": records,
            "message": None if records else "해당 조건에 맞는 거래 내역이 없습니다.",
        },
        media_type="application/json; charset=utf-8",
    )


# (2) 이름 + 대분류로 필터
@app.post("/tool/transactions_by_category")
def get_transactions_by_category(req: CategoryOnlyRequest):
    mask = (df["이름"] == req.name.strip()) & (df["카테고리(대분류)"] == req.category_major)
    sub = df.loc[mask].copy()
    records = to_records(sub)
    return JSONResponse(
        content={
            "name": req.name,
            "category_major": req.category_major,
            "records": records,
            "message": None if records else "해당 조건에 맞는 거래 내역이 없습니다.",
        },
        media_type="application/json; charset=utf-8",
    )

# (옵션) 스펙 노출
@app.get("/tools")
def list_tools():
    return [
        {
            "name": "transactions",
            "description": "고객 이름만 입력하면 해당 고객의 모든 거래 레코드를 표 형식으로 반환합니다.",
            "parameters": {
                "type": "object",
                "properties": {
                    "name": {"type": "string", "description": "고객 이름 (정확 매칭, 필수)"}
                },
                "required": ["name"]
            }
        },
        {
            "name": "transaction_by_category",
            "description": "고객 이름과 카테고리(대분류)로만 거래를 필터링해 표 형식으로 반환합니다.",
            "parameters": {
                "type": "object",
                "properties": {
                    "name": {"type": "string", "description": "고객 이름 (정확 매칭, 필수)"},
                    "category_major": {"type": "string", "description": "카테고리(대분류, 필수)"}
                },
                "required": ["name", "category_major"]
            }
        }
    ]

if __name__ == "__main__":
    # 파일명이 spend_api_min.py 라면 아래처럼 실행하세요.
    uvicorn.run("transactions:app", host="0.0.0.0", port=8001, reload=True)
